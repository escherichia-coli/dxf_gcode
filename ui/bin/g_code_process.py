import numpy as np


class GcodeProcess(object):
    def __init__(self):
        self.gcdt = ''
        set_default_param = False
        self.__defineParameters()

        # try:
        #     print(self.laser_on)
        #     print(self.speed_on)
        #     print(self.speed_off)
        #     print(self.x_offset)
        #     print(self.y_offset)
        # except AttributeError:
        #     self.speed_on = 800
        #     self.speed_off = 6000
        #     self.x_offset = 0
        #     self.y_offset = 0
        #     self.laser_on = 254

        # if set_default_param:
        #     print('User parameters cant be imported. \
        #            \nParameters set to default values')
        #     self.speed_on = 800
        #     self.speed_off = 6000
        #     self.x_offset = 0
        #     self.y_offset = 0
        #     self.laser_on = 254

        self.laser_min = 15
        self.laser_off = 0

    def __defineParameters(self):
        self.option_file = open('DXF_toGcode.options', 'r')
        lines = self.option_file.readlines()
        for line in lines:
            if line.split(':')[0] == 'LASER POWER ':
                self.laser_on = int(line.split(':')[1].replace('\n', ''))

            if line.split(':')[0] == 'ENGRAVING SPEED ':
                self.speed_on = int(line.split(':')[1].replace('\n', ''))

            if line.split(':')[0] == 'TRAVEL SPEED ':
                self.speed_off = int(line.split(':')[1].replace('\n', ''))

            if line.split(':')[0] == 'X OFFSET ':
                self.x_offset = int(line.split(':')[1].replace('\n', ''))

            if line.split(':')[0] == 'Y OFFSET ':
                self.y_offset = int(line.split(':')[1].replace('\n', ''))

            if line.split(':')[0] == 'N LAYER ':
                self.n_layer = int(line.split(':')[1].replace('\n', ''))
        self.option_file.close()

    def __goToStart(self, line):
        self.file.write('G0')
        self.file.write(' ')
        self.file.write('X')
        self.file.write(str(round(line[0], 3)))
        self.file.write(' ')

        self.file.write('Y')
        self.file.write(str(round(line[1], 3)))
        self.file.write(' ')

        self.file.write('F')
        self.file.write(str(self.speed_off))
        self.file.write('\n')

    def __drawLine(self, line):
        self.file.write('M106 S')
        self.file.write(str(self.laser_on))
        self.file.write('\n')

        self.file.write('G1')
        self.file.write(' ')
        self.file.write('X')
        self.file.write(str(round(line[0], 3)))

        self.file.write(' ')
        self.file.write('Y')
        self.file.write(str(round(line[1], 3)))
        self.file.write(' ')

        self.file.write('F')
        self.file.write(str(self.speed_on))
        self.file.write('\n')

        self.file.write('M106 S')
        self.file.write(str(self.laser_off))
        self.file.write('\n')

    def __drawPolyline(self, polyline):
        self.__goToStart(polyline[0])
        self.e_time = self.e_time + self.__line_length([self.last_pnt, polyline[0]]) / self.speed_off
        self.last_pnt = polyline[0]
        for line in polyline:
            self.__drawLine(line)
            self.e_time = self.e_time + self.__line_length([self.last_pnt, line]) / self.speed_on
            self.last_pnt = line
        # self.last_pnt = polyline[-1]

    def __line_length(self, line):
        return ((line[0][0] - line[1][0]) ** 2 + (line[0][1] - line[1][1]) ** 2) ** 0.5

    def buildGcode(self, polylines, file_name='my_gcode.gcode'):
        self.e_time = 0
        self.last_pnt = [0, 0]
        self.file = open(file_name, 'w')
        print(file_name)
        self.__defineParameters()
        self.file.write(";GCode generated by Numa's program v0.0\n")

        for polyline in polylines:
            for i in range(self.n_layer):
                self.__drawPolyline(polyline)

        self.file.write('M106 S0')
        self.file.write('\n')
        # print('done writing')
        self.file.close()

    def gcodeReader(self, file):
        pass
